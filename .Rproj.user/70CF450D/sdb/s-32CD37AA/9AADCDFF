{
    "collab_server" : "",
    "contents" : "#' get arguments index\n#' get arguments for index to pass to function and check if variable from which index is calculated exists\n#'generic function for getting climandes index arguments\n#'@param iformat Format of index:\n#' \\itemize{\n#' \\item \"perc\"(default) Percentage of days within aggregation period. Preferable if data contains missing values\n#' \\item \"days\" Absolute number of days within aggregation period.\n#' }\n#' @param na_maxperc Maximum number of NAs allowed in aggregation period. If number of NAs is higher, index value is set to NA. Default=20\n#' @keywords internal\nget_arguments_index<-function(climandes,...){\n  UseMethod(\"get_arguments_index\")\n}\n\nget_arguments.default<-function(climandes){\n  stop(\"index is not defined\")\n}\n#'arguments for index th\n#'@inheritParams get_arguments_index\n#'@param threshold Threshold (numerical)\n#'@param operator One of \">\",\">=\",\"<\",\"<=\"\n#'@param thvar Variable for which trhreshold should be calculated (tmin/tmax/tavg/prec)\n#'@param trend Trend = TRUE calculates a logistic regression (logit_reg) with no transformation of the data.\n#' @keywords internal\nget_arguments_index.th<-function(climandes,threshold,operator,thvar,iformat=\"perc\",na_maxperc=20,trend=TRUE,...){\n  if(missing(climandes) || missing(threshold) || missing(operator) ||missing(thvar)) stop(\"not all mandatory arguments provided for calculation of index\")\n  check_var(climandes,thvar)\n  return(list(ifun=\"ndays_op_threshold\",var=thvar,ifunargs=list(threshold=threshold,op=operator,iformat=iformat,na_maxperc=na_maxperc),\n              trend=trend,trendargs=list(method=\"logit_reg\", count=ifelse(iformat==\"perc\",FALSE,TRUE), log_trans=FALSE),\n    plotargs=list(iname=paste0(thvar,operator,threshold))))\n}\n\n#'arguments for index th_range\n#'@inheritParams get_arguments_index\n#'@param threshold Threshold (numerical). Thresholds need to be provided in mm for precipitation and in degrees C for temperature.\n#'@param operator One of \">\",\">=\",\"<\",\"<=\"\n#'@param threshold2 Threshold (numerical)\n#'@param operator2 One of \">\",\">=\",\"<\",\"<=\"\n#'@param thvar Variable for which days in range should be calculated (tmin/tmax/tavg/prec) by threshold operator thvar operator2 threshold2\n#'@param trend Trend = TRUE calculates a logistic regression (logit_reg) with no transformation of the data.\n#' @keywords internal\nget_arguments_index.th_range<-function(climandes,threshold,operator,threshold2,operator2,thvar,iformat=\"perc\",na_maxperc=20,trend=TRUE,...){\n  if(missing(climandes) || missing(threshold) || missing(operator) || missing(threshold2) || missing(operator2)||missing(thvar)) stop(\"not all mandatory arguments provided for calculation of index\")\n  check_var(climandes,thvar)\n  return(list(ifun=\"ndays_in_range\",var=thvar,ifunargs=list(threshold=threshold,op=operator,threshold2=threshold2,op2=operator2,iformat=iformat,na_maxperc=na_maxperc),\n              trend=trend,trendargs=list(method=\"logit_reg\", count=ifelse(iformat==\"perc\",FALSE,TRUE), log_trans=FALSE),\n    plotargs=list(iname=paste0(threshold,operator,thvar,operator2,threshold2))))\n}\n\n#'arguments for index fd\n#'@inheritParams get_arguments_index\n#'@rdname fd_arguments\n#'@param trend Trend = TRUE calculates a logistic regression (logit_reg) with no transformation of the data.\n#'@keywords internal\nget_arguments_index.fd<-function(climandes,iformat=\"perc\",na_maxperc=20,trend=TRUE,...){\n  check_var(climandes,\"tmin\")\n  return(list(ifun=\"ndays_op_threshold\",var=\"tmin\",ifunargs=list(threshold=0,op=\"<\",iformat=iformat,na_maxperc=na_maxperc),\n              trend=trend,trendargs=list(method=\"logit_reg\", count=ifelse(iformat==\"perc\",FALSE,TRUE), log_trans=FALSE),\n    plotargs=list(iname=\"frost days\")))\n}\n\n#'arguments for index dd\n#'@inheritParams get_arguments_index\n#'@param trend Trend = TRUE calculates a logistic regression (logit_reg) with no transformation of the data.\n#'@keywords internal\nget_arguments_index.dd<-function(climandes,iformat=\"perc\",na_maxperc=20,trend=TRUE,...){\n  check_var(climandes,\"prec\")\n  return(list(ifun=\"ndays_op_threshold\",var=\"prec\",ifunargs=list(threshold=1,op=\"<\",iformat=iformat,na_maxperc=na_maxperc),\n              trend=trend,trendargs=list(method=\"logit_reg\", count=ifelse(iformat==\"perc\",FALSE,TRUE), log_trans=FALSE),\n    plotargs=list(iname=\"dry days\")))\n}\n\n#'arguments for index pheno_tmin\n#'@param threshold Threshold value in degrees C for  tmin < threshold\n#'@inheritParams get_arguments_index\n#'@param trend Trend = TRUE calculates a logistic regression (logit_reg) with no transformation of the data.\n#'@keywords internal\nget_arguments_index.pheno_tmin<-function(climandes,threshold,iformat=\"perc\",na_maxperc=20,trend=TRUE,...){\n  if( missing(threshold) ) stop(\"<<threshold>> not provided>>\")\n  check_var(climandes,\"tmin\")\n  return(list(ifun=\"ndays_op_threshold\",var=\"tmin\",ifunargs=list(threshold=threshold,op=\"<\",iformat=iformat,na_maxperc=na_maxperc),\n              trend=trend,trendargs=list(method=\"logit_reg\", count=ifelse(iformat==\"perc\",FALSE,TRUE), log_trans=FALSE),\n    plotargs=list(iname=paste0(\"minimum temperature below \" ,(threshold)))))\n}\n\n#'arguments for index pheno_tmax\n#'@param threshold Threshold value in degrees C for  tmax > threshold\n#'@inheritParams get_arguments_index\n#'@param trend Trend = TRUE calculates a logistic regression (logit_reg) with no transformation of the data.\n#'@keywords internal\nget_arguments_index.pheno_tmax<-function(climandes,threshold,iformat=\"perc\",na_maxperc=20,trend=TRUE,...){\n  if( missing(threshold) ) stop(\"<<threshold>>not provided\")\n  check_var(climandes,\"tmax\")\n  #trend=ifelse(format==\"days\",1,2)\n  return(list(ifun=\"ndays_op_threshold\",var=\"tmax\",ifunargs=list(threshold=threshold,op=\">\",iformat=iformat,na_maxperc=na_maxperc),\n              trend=trend,trendargs=list(method=\"logit_reg\", count=ifelse(iformat==\"perc\",FALSE,TRUE), log_trans=FALSE),\n    plotargs=list(iname=paste0(\"maximum temperature above \" ,(threshold)))))\n}\n\n#'arguments for index pheno_topt\n#'@param threshold, threshold2 Threshold value in degrees C for  threshold <= tavg <= threshold2\n#'@inheritParams get_arguments_index\n#'@param trend Trend = TRUE calculates a logistic regression (logit_reg) with no transformation of the data.\n#' @keywords internal\nget_arguments_index.pheno_topt<-function(climandes,threshold,threshold2,iformat=\"perc\",na_maxperc=20,trend=TRUE,...){\n  if( missing(threshold) ) stop(\"at least one threshold is missing, please proved <<threshold>> and <<thrshold2>>\")\n  check_var(climandes,\"tavg\")\n  #trend=ifelse(format==\"days\",1,2)\n  return(list(ifun=\"ndays_in_range\",var=\"tavg\",ifunargs=list(threshold=threshold,op=\">=\",threshold2=threshold2,op2=\"<=\",iformat=iformat,na_maxperc=na_maxperc),\n              trend=trend,trendargs=list(method=\"logit_reg\", count=ifelse(iformat==\"perc\",FALSE,TRUE), log_trans=FALSE),\n    plotargs=list(iname=paste0(\"optimum temperature range (\", threshold,\"-\",threshold2,\")\"))))\n}\n\n#'arguments for index rainy_season_start\n#'@param rs_method: method for calculation of index (further indicator arguments for each rs_method are given in brackets and defined below, arguments without default that have to be provided are in bold font ):\n#'\\itemize{\n#' \\item stern (nval): 3 of 5 days > 0.1mm & sum(5days) > 25mm and maximum number of consecutive dry days  within the next 30 days >=7\n#'\n#'   \\item garcia (nval): sum(3days) > 20mm and maximum number of consecutive dry days within the next 30 days <=10\n#'\n#'   \\item gurgiser (nval): sum(7days) > 10mm and number of consecutive wet days   within the next 30 days > 10 (Gurgiser,2017)\n#'\n#'   \\item consec_th (\\strong{days,th},nval): sum of user defined number of consecutive days above user defined threshold (e.g. sum of 4 days > 10mm)\n#'\n#'   \\item consec_th_maxcdd (\\strong{days,th,mdays,mcdd},nval): sum of user defined number of consecutive days above user defined threshold and maximum number of consecutive dry days within a number of user defined days (e.g. sum of 4 days > 10mm and maximum 6 consecutive dry days within the next 30 days)\n#'}\n#'@param nval Value which is returned if criteria for start of rainy season are not met, default=NA. Other values can be set to distinguish between years where data is NA and years where criteria of index are not met\n#'@param days number of consecutive days of which precipitation sum is higher than threshold <<th>>\n#'@param th threshold for precipitation sum of <<days>> consecutive days\n#'@param mcdd Maximum consecutive dry days in the next <<mdays>> days\n#'@param mdays Number of days to check for <<mcdd>>\n#'@param trend Trend = TRUE calculates a linear regression (lin_reg) with no transformation of the data.\n#'@keywords internal\nget_arguments_index.rainy_season_start<-function(climandes,rs_method,days,th,nval=NA,mdays,mcdd,trend=TRUE,...){\n  check_var(climandes,\"prec\")\n  if (rs_method==\"consec_th\") {\n    if(missing(days) || missing(th)) stop(\"at least one of the mandatory argumens( <<days>>,<<th>>) is missing\")\n    method_args=list(rs_method=rs_method,days=days,th=th,nval=nval)\n    methodname=paste0(days,\"daysum_gt\",th)\n  } else if (rs_method==\"consec_th_maxcdd\") {\n    if(missing(days) || missing(th) ||missing(mdays) || missing(mcdd)) stop(\"at least one of the mandatory argumens( <<days>>,<<th>>,<<mdays>>,<<mcdd>>) is missing\")\n    method_args=list(rs_method=rs_method,days=days,th=th,mdays=mdays,mcdd=mcdd,nval=nval)\n    methodname=paste0(days,\"daysum_gt\",th,\"_\",mcdd,\"maxcdd_in\",mdays,\"days\")\n  } else {\n    method_args=list(rs_method=rs_method,nval=nval)\n    methodname=rs_method\n  }\n\n  return(list(ifun=paste0(\"rainy_season_start\"),var=\"prec\",ifunargs=method_args,trend=trend, trendargs=list(method=\"lin_reg\", count=TRUE, log_trans=FALSE),\n    plotargs=list(name=\"rainy_season_start\",iname=paste0(\"start of rainy season (\" ,methodname,\")\" ),iformat=\"dayscount\")))\n}\n\n\n\n#'arguments for index prcptot\n#'@inheritParams get_arguments_index\n#'@param trend Trend = TRUE calculates a logistic regression (logit_reg) with no transformation of the data.\n#'@keywords internal\nget_arguments_index.prcptot<-function(climandes,na_maxperc=20,trend=TRUE,...){\n  check_var(climandes,\"prec\")\n  return(list(ifun=\"total_precip_op_threshold\",var=\"prec\",ifunargs=list(threshold=1,op=\">=\", na_maxperc=na_maxperc),\n              trend=trend,trendargs=list(method=\"lin_reg\", count=FALSE, log_trans=TRUE),\n              plotargs=list(iname=\"PRCPTOT\")))\n}\n\n\n#'arguments for index prcptot\n#'@inheritParams get_arguments_index\n#'@param trend Trend = TRUE calculates a logistic regression (logit_reg) with no transformation of the data.\n#'@keywords internal\nget_arguments_index.sdii<-function(climandes,na_maxperc=20,trend=TRUE,...){\n  check_var(climandes,\"prec\")\n  return(list(ifun=\"total_precip_op_threshold\",var=\"prec\",ifunargs=list(threshold=1,op=\">=\", na_maxperc=na_maxperc, int=TRUE),\n              trend=trend,trendargs=list(method=\"lin_reg\", count=FALSE, log_trans=TRUE),\n              plotargs=list(iname=\"SDII\")))\n}\n\n\n#'arguments for index cdd\n#'@inheritParams get_arguments_index\n#'@param trend Trend = TRUE calculates a logistic regression (logit_reg) with no transformation of the data.\n#'@keywords internal\nget_arguments_index.cdd<-function(climandes,na_maxperc=20,trend=TRUE,...){\n  check_var(climandes,\"prec\")\n  return(list(ifun=\"spell_length_max\",var=\"prec\",ifunargs=list(threshold=1,op=\"<=\",iformat= \"dayscount\",na_maxperc=na_maxperc, spells.can.span.years=TRUE),\n              trend=trend,trendargs=list(method=\"lin_reg\",count=FALSE,  log_trans=FALSE),\n              plotargs=list(iname=\"CDD\")))\n}\n\n\n#'arguments for index cwd\n#'@inheritParams get_arguments_index\n#'@param trend Trend = TRUE calculates a logistic regression (logit_reg) with no transformation of the data.\n#'@keywords internal\nget_arguments_index.cwd<-function(climandes,na_maxperc=20,trend=TRUE,...){\n  check_var(climandes,\"prec\")\n  return(list(ifun=\"spell_length_max\",var=\"prec\",ifunargs=list(threshold=1,op=\">=\",iformat= \"dayscount\",na_maxperc=na_maxperc, spells.can.span.years=TRUE),\n              trend=trend,trendargs=list(method=\"lin_reg\",count=FALSE,  log_trans=FALSE),\n              plotargs=list(iname=\"CWD\")))\n}\n\n#'arguments for index tnn\n#'@inheritParams get_arguments_index\n#'@param trend Trend = TRUE calculates a logistic regression (logit_reg) with no transformation of the data.\n#'@keywords internal\nget_arguments_index.tnn<-function(climandes,na_maxperc=20,trend=TRUE,...){\n  check_var(climandes,\"tmin\")\n  return(list(ifun=\"minmax_value\",var=\"tmin\",ifunargs=list(func=min, na_maxperc=na_maxperc),\n              trend=trend,trendargs=list(method=\"lin_reg\",count=FALSE,  log_trans=FALSE),\n              plotargs=list(iname=\"TNN\")))\n}\n\n#'arguments for index tnn\n#'@inheritParams get_arguments_index\n#'@param trend Trend = TRUE calculates a logistic regression (logit_reg) with no transformation of the data.\n#'@keywords internal\nget_arguments_index.tnx<-function(climandes,na_maxperc=20,trend=TRUE,...){\n  check_var(climandes,\"tmin\")\n  return(list(ifun=\"minmax_value\",var=\"tmin\",ifunargs=list(func=max, na_maxperc=na_maxperc),\n              trend=trend,trendargs=list(method=\"lin_reg\",count=FALSE,  log_trans=FALSE),\n              plotargs=list(iname=\"TNX\")))\n}\n#'arguments for index tnn\n#'@inheritParams get_arguments_index\n#'@param trend Trend = TRUE calculates a logistic regression (logit_reg) with no transformation of the data.\n#'@keywords internal\nget_arguments_index.txn<-function(climandes,na_maxperc=20,trend=TRUE,...){\n  check_var(climandes,\"tmax\")\n  return(list(ifun=\"minmax_value\",var=\"tmax\",ifunargs=list(func=min, na_maxperc=na_maxperc),\n              trend=trend,trendargs=list(method=\"lin_reg\",count=FALSE,  log_trans=FALSE),\n              plotargs=list(iname=\"TXN\")))\n}\n\n#'arguments for index tnn\n#'@inheritParams get_arguments_index\n#'@param trend Trend = TRUE calculates a logistic regression (logit_reg) with no transformation of the data.\n#'@keywords internal\nget_arguments_index.txx<-function(climandes,na_maxperc=20,trend=TRUE, ...){\n  check_var(climandes,\"tmax\")\n  return(list(ifun=\"minmax_value\",var=\"tmax\",ifunargs=list(func=max, na_maxperc=na_maxperc),\n              trend=trend,trendargs=list(method=\"lin_reg\",count=FALSE,  log_trans=FALSE),\n              plotargs=list(iname=\"TXX\")))\n}\n\n#'arguments for index tnn\n#'@inheritParams get_arguments_index\n#'@param trend Trend = TRUE calculates a logistic regression (logit_reg) with no transformation of the data.\n#'@keywords internal\nget_arguments_index.rx<-function(climandes,na_maxperc=20,trend=TRUE,rx ,...){\n  check_var(climandes,\"prec\")\n  return(list(ifun=\"minmax_value\",var=\"prec\",ifunargs=list(func=max, na_maxperc=na_maxperc, rx),\n              trend=trend,trendargs=list(method=\"lin_reg\",count=FALSE,  log_trans=FALSE),\n              plotargs=list(iname=paste0(\"RX \",rx))))\n}\n\n\n#----spi-----\n#'arguments for index spi\n#'@inheritParams get_arguments_index\n#'@param climandes: climandes object with precipitation data\n#'@param timescale: choose scale of SPI calculation, i.e.running mean, 1-monthly,3-monthly, etc.\n#'@param ref number of consecutive days of which precipitation sum is higher than threshold <<th>>\n#'@param distribution threshold for precipitation sum of <<days>> consecutive days\n#'@param limit Do you want to apply a limit to the SPI calculation, as values above e.g. 4(-4) are not reasonable? Default to NULL\n#'@param na_maxperc Number of days to check for <<mcdd>>\n#'@keywords internal\nget_arguments_index.spi<-function(climandes,timescale,ref=NULL,distribution, trend=TRUE,trendargs, na_maxperc=20,forecast=FALSE,...){\n  if(missing(climandes)) stop(\"not all mandatory arguments provided\")\n  check_var(climandes,\"prec\")\n  if (missing(timescale)) {\n    timescale <- c(6)\n    warning(\"timescales are missing. Set to 6\") }\n  if (missing(distribution)) {\n    distribution <- \"gamma\"\n    warning(\"distribution is missing. Set to gamma\") }\n\n  return(list(ifun=\"calc_spi\",var=\"prec\",ifunargs=list(distribution=distribution,forecast=FALSE,timescale=timescale, ref,na_maxperc=na_maxperc, iformat=\"SPI\"),\n              trendargs=list(method=\"lin_reg\", count=TRUE,log_trans=FALSE),trend=trend,\n              plotargs=list(iname=paste0(\"SPI\",timescale, ref))))\n}\n\n#'arguments for index spi_forecast\n#'@inheritParams get_arguments_index\n#'@param climandes: climandes object with precipitation data\n#'@param timescale: choose scale of SPI calculation, i.e.running mean, 1-monthly,3-monthly, etc.\n#'@param ref number of consecutive days of which precipitation sum is higher than threshold <<th>>\n#'@param distribution threshold for precipitation sum of <<days>> consecutive days\n#'@param limit Do you want to apply a limit to the SPI calculation, as values above e.g. 4(-4) are not reasonable? Default to NULL\n#'@param na_maxperc Number of days to check for <<mcdd>>\n#'@keywords internal\nget_arguments_index.spi_forecast<-function(climandes,timescale,forecast=TRUE,ref=NULL,distribution, trend=TRUE,trendargs, na_maxperc=20,...){\n  if(missing(climandes)) stop(\"not all mandatory arguments provided\")\n  check_var(climandes,\"prec\")\n  if (missing(timescale)) {\n    timescale <- c(6)\n    warning(\"timescales are missing. Set to 6\") }\n  if (missing(distribution)) {\n    distribution <- \"gamma\"\n    warning(\"distribution is missing. Set to gamma\") }\n\n  return(list(ifun=\"calc_spi\",var=\"prec\",ifunargs=list(distribution=distribution,forecast=TRUE,timescale=timescale, ref,na_maxperc=na_maxperc),\n              trendargs=list(method=\"lin_reg\", count=TRUE,log_trans=FALSE),trend=trend,\n              plotargs=list(iname=paste0(\"SPI\",timescale, ref))))\n}\n\n#----quant values-----\n\n#'arguments for index qth\n#'@inheritParams get_arguments_index\n#'@param trend Trend = TRUE calculates a linear regression (lin_reg) with no transformation of the data.\n#'@keywords internal\nget_arguments_index.qth<-function(climandes,thvar, na_maxperc=20,trend=TRUE ,iformat=\"perc\", threshold, operator,q,baseperiod,  ...){\n  check_var(climandes,thvar)\n  return(list(ifun=\"ndays_op_threshold\",var=thvar,\n              ifunargs=list(threshold=(threshold/100),op=operator,iformat=\"perc\",na_maxperc=na_maxperc,q=q, baseperiod = baseperiod),\n              trend=trend,trendargs=list(method=\"lin_reg\",count=FALSE,  log_trans=FALSE),\n              plotargs=list(iname=\"qt\")))\n}\n\n#'arguments for index qtot\n#'@inheritParams get_arguments_index\n#'@param trend Trend = TRUE calculates a linear regression (lin_reg) with no transformation of the data.\n#'@keywords internal\nget_arguments_index.qtot<-function(climandes,thvar, na_maxperc=20,trend=TRUE , threshold, operator,q,baseperiod,  ...){\n  check_var(climandes,\"prec\")\n  return(list(ifun=\"total_precip_op_threshold\",var=\"prec\",\n              ifunargs=list(threshold=(threshold/100),op=operator,na_maxperc=na_maxperc,q=q, baseperiod = baseperiod),\n              trend=trend,trendargs=list(method=\"lin_reg\",count=FALSE,  log_trans=FALSE),\n              plotargs=list(iname=\"qtot\")))\n}\n\n#'arguments for index spell duration index (CSDI/WSDI)\n#'@inheritParams get_arguments_index\n#'@param trend Trend = TRUE calculates a linear regression (lin_reg) with no transformation of the data.\n#'@keywords internal\nget_arguments_index.sdi<-function(climandes,thvar, na_maxperc=20,trend=TRUE , threshold, operator,min_length=6,q,baseperiod,  ...){\n  check_var(climandes,thvar)\n  return(list(ifun=\"spell_duration\",var=\"prec\",\n              ifunargs=list(threshold=(threshold/100), func=ifelse(thvar==\"tmin\",min,max), op=operator,min_length=6,na_maxperc=na_maxperc,q=q, baseperiod = baseperiod),\n              trend=trend,trendargs=list(method=\"logit_reg\",count=FALSE,  log_trans=FALSE),\n              plotargs=list(iname=ifelse(thvar==\"tmin\",\"CSDI\",\"WSDI\"))))\n}\n",
    "created" : 1516699931436.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "1759288241",
    "id" : "9AADCDFF",
    "lastKnownWriteTime" : 1516711036,
    "last_content_update" : 1516711036528,
    "path" : "/prod/zue/climate/comm_serv/CLIMANDES_Data/src_C2/Rclimandes_2/imn_code/climandes-2/src/ClimIndVis/R/calc_climandes_indices_get_arguments.R",
    "project_path" : "R/calc_climandes_indices_get_arguments.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}