{
    "collab_server" : "",
    "contents" : "\n\n#puts default arguments(\"argdefaults\") for args in \"argnames\" in \"arglist\" if arguments are not provided\nput_default_args<-function(argnames,argdefaults,arglist){\n  for (a in argnames) if(is.null(arglist[[a]])) arglist[[a]]<-argdefaults[[which(argnames==a)]]\n  return(arglist)\n}\n\n\n\n# gets factors to cut out wanted time slices. \"annual\",\"monthly\",\"seasonal\" or array with consecutive months\nget_date_factors<-function(climandes,agg,aggmons=NULL,start_days=NA,end_days=NA){\n  if(agg==\"other\") if(is.null(aggmons)) stop (\"if <<aggregation>> is other, <<aggregation_months>> need to be specified\")\n  if(agg==\"dates\") if(is.null(start_days) | is.null(end_days)) stop (\"if <<aggregation>> is dates, <<start_days>> and <<end_days>> need to be specified\")\n  years<-levels(climandes$time_factors$years)\n  if (agg == \"annual\") {\n    r<-factor(climandes$time_factor$years)\n  } else if (agg==\"monthly\" & is.null(aggmons)){\n    r<-factor(climandes$time_factor$yearmons)\n  } else if (agg==\"monthly\" & !is.null(aggmons)){\n    r<-factor(select_months_factors(climandes$time_factors$yearmons,levels(climandes$time_factors$years),aggmons))\n  } else if (agg == \"seasonal\") {\n    r<-factor(select_seas_factors(climandes$time_factors$yearmons,levels(climandes$time_factors$years)))\n  } else if (agg == \"other\") {\n    r<-factor(select_date_factors_monthly(climandes$time_factors$yearmons,levels(climandes$time_factors$years),aggmons))\n  } else if (agg == \"dates\"){\n    r<-factor(select_date_factors(climandes$time,start_days,end_days))\n  }\n  return(r)\n}\n#help functions for get_date_factors\nselect_date_factors_monthly<-function(yearmons,years,aggmons){\n  mons<-as.integer(unique(sapply(strsplit(levels(yearmons),split=\"-\"),\"[\",2)))\n  #if(length(mons<12) & tail(mons,1)< head(mons,1)) years = years[1:(length(years)-1)]\n  if(all(is.element(aggmons,mons))){\n    addy<-ifelse(tail(aggmons,1)>aggmons[1],0,1)\n    beg_dates<-sapply(years, function(x) {\n                  if (is.element(paste0(x,\"-\",pad2(aggmons[1])),yearmons)){\n                    which(as.character(yearmons)==paste0(x,\"-\",pad2(aggmons[1])))[1]\n                  } else NA})\n    end_dates<-sapply(years, function(x) {\n                  if (is.element(paste0(as.integer(x)+addy,\"-\",pad2(tail(aggmons,1))),yearmons)) {\n                    tail(which(as.character(yearmons)==paste0(as.integer(x)+addy,\"-\",pad2(tail(aggmons,1)))),1)\n                  } else NA})\n    if(addy==1){\n      end_dates[is.na(beg_dates)]=NA\n      beg_dates[is.na(end_dates)]=NA\n    }\n    help<-array(NA,length(yearmons))\n    for(i in 1:length(beg_dates)) if(!is.na(beg_dates[i])) help[beg_dates[i]:end_dates[i]]=substring(yearmons[beg_dates[i]],1,4)\n    } else stop(\"data does not contain (all) months to be selected, please choose different time slice\")\n  return(help)\n}\n\n#selects time factors for dates, either same day and month for every year, where date needs to be of format\n# \"0000-mm-dd, e.g.\n#start_days=as.Date(\"0000-06-01\")\n#end_days=as.Date(\"0000-06-05\")\n# or array of dates of same length as years, e.g. for 3 years:\n# start_days=as.Date(c(\"1981-01-06\",\"1982-02-07\",\"1983-05-02\"))\n# end_days=as.Date(c(\"1981-06-06\",\"1982-03-07\",\"1983-04-02\"))\nselect_date_factors<-function(times,start_days,end_days){\n  if (is.na(start_days) || is.na(end_days)) stop(\"<<start_days>> and <<end_days>> need to be defined.\")\n  years=as.integer(unique(format(times,\"%Y\")))\n  if (class(start_days)!= \"Date\") start_days=as.Date(start_days)\n  if (class(end_days)!= \"Date\") end_days=as.Date(end_days)\n  if(length(start_days)==1 & length (end_days)==1){\n    if ((format(start_days,\"%Y\")[1] !=\"0\" | format(end_days,\"%Y\")[1] !=\"0\" )& length(years)!=1) stop(\"start and end string have to be of type 0000-mm-dd, eg 0000-08-01\")\n    addy<-ifelse(end_days-start_days <0,1,0)\n    beg_dates<-sapply(years, function(x) {\n      if (as.Date(paste0(x,\"-\",format(start_days,\"%m-%d\")))-head(times,1)>=0 ) {\n        return(which(times == paste0(x,\"-\",format(start_days,\"%m-%d\"))))\n        } else return(NA)})\n    end_dates<-sapply(years, function(x) {\n      if (as.Date(paste0(x+addy,\"-\",format(end_days,\"%m-%d\")))-tail(times,1)<=0 ) {\n        return(which(times == paste0(x+addy,\"-\",format(end_days,\"%m-%d\"))))\n    }else return(NA)})\n\n    #if(addy==1){\n      end_dates[is.na(beg_dates)]=NA\n      beg_dates[is.na(end_dates)]=NA\n    #}\n    vals=years\n\n  } else if (length(start_days)>1){\n    if (length(start_days)!=length(end_days)) stop (\"length of start_days and end_days differs\")\n    years_match<-is.element(as.integer(unique(format(start_days,\"%Y\"))),years) & is.element(as.integer(unique(format(end_days,\"%Y\"))),years)\n    if (any(years_match)==FALSE) stop(\"climandes object does not contain any of the years to be selected\")\n    if (all(years_match)==FALSE) warning(\"dates to be selected and years in climandes object do not match. Only matching years are used\")\n\n    beg_dates=which(is.element(times,start_days[years_match]))\n    end_dates=which(is.element(times,end_days[years_match]))\n    vals=format(start_days,\"%Y\")\n  }\n  help<-array(NA,length(times))\n  for(i in 1:length(beg_dates)) if(!is.na(beg_dates[i]) & !is.na(end_dates[i])) help[beg_dates[i]:end_dates[i]]=vals[i]\n\nreturn(help)\n}\n\nselect_seas_factors<-function(yearmons,years){\n  beg=c(3,6,9,12)\n  end=c(5,8,11,2)\n  seasnames=c(\"MAM\",\"JJA\",\"SON\",\"DJF\")\n  help<-array(NA,length(yearmons))\n  mons<-as.integer(unique(sapply(strsplit(levels(yearmons),split=\"-\"),\"[\",2)))\n  c=0\n  for (i in 1:4){\n    if(all(is.element(monlist(beg[i],end[i]),mons))){\n      c=c+1\n      addy<-ifelse(beg[i]<end[i],0,1)\n      beg_dates<-sapply(years, function(x) which(as.character(yearmons)==paste0(x,\"-\",pad2(beg[i])))[1])\n      end_dates<-sapply(years, function(x) { h<-which(as.character(yearmons)==paste0(as.integer(x)+addy,\"-\",pad2(end[i])))\n                                             ifelse (length(h)>0,tail(h,1),NA)})\n      if(addy==1){\n        end_dates<-c(unlist(end_dates),NA)\n        beg_dates[is.na(end_dates)]=NA\n      }\n      for(k in 1:length(beg_dates)) if(!is.na(beg_dates[k]) & !is.na(end_dates[k])) help[beg_dates[k]:end_dates[k]]=paste0(years[k],\"-\",seasnames[i])\n\n    }\n  }\n  if (c==0) stop(\"data does not include (all) selected months\")\n  return(factor(help))\n}\n\nselect_months_factors<-function(yearmons,years,aggmons){\n    help<-yearmons\n    help[!is.element(sapply(strsplit(as.character(yearmons),split=\"-\"),\"[\",2),pad2(aggmons))]=NA\n    return(help)\n}\n\n#calculate number of days op(\">\",\"<\",\"<=\",\">=\") a threshold using functions from climdex.pcic\nndays_op_threshold<-function (temp, date.factor, threshold, op = \"<\",iformat=\"perc\",na_maxperc=20, int=FALSE, q=NULL, baseperiod=NULL)\n{\n  stopifnot(is.numeric(temp) && is.numeric(threshold) && is.factor(date.factor))\n\n  if(!is.null(q)){\n    ind <- as.numeric(gsub(\"-.*\",\"\",date.factor))\n    temp_b <- temp[ind>baseperiod[1]& ind<baseperiod[2]]\n    date.factor_b <- date.factor[ind>baseperiod[1]& ind<baseperiod[2]]\n    agg_factor <- as.factor(gsub(\".*-\",\"\", date.factor_b))\n    quants <- rep(climdex.pcic:::tapply.fast(temp_b, agg_factor,  function(x){\n      tresh <- climdex.pcic::climdex.quantile(x,q = q)[threshold==q]}), length.out=length(ind))\n\n    days <- mapply_fast(temp,quants, date.factor, function(x,y,z){sum(match.fun(op)(x,y), na.rm=TRUE)}, z=op)\n\n  } else {\n    days<-climdex.pcic:::tapply.fast(match.fun(op)(temp, threshold), date.factor,\n                                     sum, na.rm = TRUE)\n  }\n  nna<-climdex.pcic:::tapply.fast(is.na(temp)==FALSE, date.factor,\n    sum, na.rm = TRUE)\n  length<-climdex.pcic:::tapply.fast(temp, date.factor,\n    function(x) length(x))\n  days[nna/length*100<(100-na_maxperc)]=NA\n  if(iformat==\"perc\"){\n    nna<-climdex.pcic:::tapply.fast(is.na(temp)==FALSE, date.factor,\n    sum, na.rm = TRUE)\n    out<-round(days/nna*100,dig=1)\n    out[which(nna==0)]=NA\n   return(out)\n  } else  return(days)\n}\n\n#calculate sum of of days op a threshold\ntotal_precip_op_threshold <- function(temp, date.factor, threshold, op= \">\", na_maxperc=20,int=FALSE, q=NULL,baseperiod=NULL) {\n  stopifnot(is.numeric(temp) && is.numeric(threshold) && is.factor(date.factor))\n  if(!is.null(q)){\n    ind <- as.numeric(gsub(\"-.*\",\"\",date.factor))\n    temp_b <- temp[ind>baseperiod[1]& ind<baseperiod[2]]\n    date.factor_b <- date.factor[ind>baseperiod[1]& ind<baseperiod[2]]\n    agg_factor <- as.factor(gsub(\".*-\",\"\", date.factor_b))\n    quants <- rep(climdex.pcic:::tapply.fast(temp_b, agg_factor,  function(x){\n      tresh <- climdex.pcic::climdex.quantile(x,q = q)[threshold==q]}), length.out=length(ind))\n\n    mm <- mapply_fast(temp,quants, date.factor, function(x,y,z){\n      sum(x[match.fun(op)(x,y)], na.rm=TRUE)}, z=op)\n\n  } else {mm <- climdex.pcic:::tapply.fast(temp[match.fun(op)(temp, threshold)],date.factor[match.fun(op)(temp, threshold)],\n                                     sum,na.rm=TRUE)}\n\n  nna<-climdex.pcic:::tapply.fast(is.na(temp)==FALSE, date.factor,\n                                  sum, na.rm = TRUE)\n  length<-climdex.pcic:::tapply.fast(temp, date.factor,\n                                     function(x) length(x))\n  mm[nna/length*100<(100-na_maxperc)]=NA\n  return(mm)\n\n}\n\n\n\n#calculate number of days between two thresholds using functions from climdex.pcic\nndays_in_range<-function (temp, date.factor, threshold, op = \">\",threshold2,op2=\"<\",iformat=\"perc\",na_maxperc=20)\n{stopifnot(is.numeric(temp) && is.numeric(threshold) && is.numeric(threshold2) && is.factor(date.factor))\n  days<-climdex.pcic:::tapply.fast(match.fun(op)(temp, threshold) & match.fun(op2)(temp, threshold2), date.factor,\n    sum, na.rm = TRUE,drop=FALSE)\n  nna<-climdex.pcic:::tapply.fast(is.na(temp)==FALSE, date.factor,\n    sum)\n  length<-climdex.pcic:::tapply.fast(temp, date.factor,\n    function(x) length(x))\n  days[nna/length*100<(100-na_maxperc)]=NA\n  if(iformat==\"perc\"){\n    out<-round(days/nna*100,dig=1)\n    out[which(nna==0)]=NA\n    return(out)\n  } else  return(days)\n}\n\nspell_length_max <- function(temp, date.factor, threshold, op, spells_span_years=TRUE, na_maxperc =20){\n  stopifnot(is.numeric(temp) && is.numeric(threshold) &&  is.factor(date.factor))\n  days_op<-match.fun(op)(temp, threshold)\n\n  if (spells_span_years) {\n    all.true <- climdex.pcic:::tapply.fast(days_op, date.factor, all)\n    max.spell <- climdex.pcic:::tapply.fast(get.series.lengths.at.ends(days_op),\n                             date.factor, max)\n    na.mask <- c(1, NA)[as.integer((max.spell == 0) & all.true) +\n                          1]\n    return(max.spell * na.mask)\n  }\n  else {\n    return(climdex.pcic:::tapply.fast(days_op, date.factor, function(x) {\n      max(get.series.lengths.at.ends(x))\n    }))\n  }}\n\nminmax_value <- function(temp, date.factor, func, na_maxperc=20,rx=NULL) {\n  stopifnot(is.numeric(temp) && is.function(func) && is.factor(date.factor))\n  if (!is.null(rx)){if(rx >1){\n    temp[is.na(temp)]<-0\n    temp.sum <- caTools::runmean(temp, k= rx, endrule=\"NA\")\n    temp.sum[is.na(temp.sum)]<- 0\n    vals <- climdex.pcic:::tapply.fast(temp.sum, date.factor, func) * rx\n  }}\n  else{vals <- climdex.pcic:::tapply.fast(temp,date.factor,func)}\n\n    nna<-climdex.pcic:::tapply.fast(is.na(temp)==FALSE, date.factor,sum, na.rm = TRUE)\n    length<-climdex.pcic:::tapply.fast(temp, date.factor, function(x) length(x))\n    vals[nna/length*100<(100-na_maxperc)]=NA\n  return(vals)\n}\n\nrearange_by_year<-function(data,data_levels){\n  rn<-data_levels\n  yy<-as.factor(sapply(strsplit(rn,split=\"-\"),\"[\",1))\n  yyn<-levels(yy)\n  tt<-as.factor(sapply(strsplit(rn,split=\"-\"),\"[\",2))\n  ttn<-levels(tt)\n  if (length(ttn)==0){\n    if(length(rn)>1){\n      data_out<-array(NA,dim=c(dim(data)[-1],length(yyn)))\n      for (y in yyn) if (is.element(y,rn)) data_out[,y==yyn]<-data[y,]\n    } else {\n        data_out<-array(data,dim=c(length(data),length(yyn)))\n    }\n    dimnames(data_out) <-list(NULL,yyn)\n  } else if (length(ttn)>0) {\n    if(length(rn)>1){\n      data_out<-array(NA,dim=c(dim(data)[-1],length(ttn),length(yyn)))\n      for (y in yyn) for (t in ttn) if (is.element(paste0(y,\"-\",t),rn)) data_out[,t==ttn,y==yyn]<-data[paste0(y,\"-\",t),]\n    } else {\n      data_out<-array(data,dim=c(length(data),length(ttn),length(yyn)))\n    }\n    dimnames(data_out) <-list(NULL,ttn,yyn)\n  }\nreturn(data_out)\n}\n\n\n\nget_idims<-function(climandes,args){\n  if(length(grep(\"p\",climandes$data_info$type))>0){\n    idims=\"p\"\n  } else if (length(grep(\"grid\",climandes$data_info$type))>0){\n    idims=c(\"lon\",\"lat\")\n  }\n  if (length(grep(\"hc|fc\",climandes$data_info$type))>0){\n    idims=c(idims,\"ens\")\n  }\n  if (is.element(args$aggregation,c(\"seasonal\",\"monthly\"))){\n    idims=c(idims,\"agg\")\n  }\n  idims=c(idims,\"year\")\n  return(idims)\n}\n\n\n\nspell_duration <- function (temp, date.factor, func,jdays, thresholds, op = \">\",baseperiod, q,\n          min_length = 6, spells_span_years = TRUE, na_maxperc)\n{\n  stopifnot(is.numeric(c(temp, thresholds, min_length)),\n            is.factor(date.factor), is.function(match.fun(op)), min_length >\n              0)\n  f <- match.fun(op)\n # das ist der neue Teil für quantiles von oben kopiert....\n  ind <- as.numeric(gsub(\"-.*\",\"\",date.factor))\n  temp_b <- temp[ind>baseperiod[1]& ind<baseperiod[2]]\n  date.factor_b <- date.factor[ind>baseperiod[1]& ind<baseperiod[2]]\n  agg_factor <- as.factor(gsub(\".*-\",\"\", date.factor_b))\n  quants <- rep(climdex.pcic:::tapply.fast(temp_b, agg_factor,  function(x){\n  tresh <- climdex.pcic::climdex.quantile(x,q = q)[threshold==q]}), length.out=length(ind))\n\n  days <- mapply_fast(temp,quants, date.factor, function(x,y,z){sum(match.fun(op)(x,y), na.rm=TRUE)}, z=op)\n\n  if (spells_span_years) {\n    periods <- select_blocks(f(temp, thresholds[jdays]),\n                                       min_length - 1)\n    vals <- climdex.pcic:::tapply.fast(periods, date.factor, sum)\n  }\n  else {\n    vals <- climdex.pcic:::tapply.fast(1:length(temp), date.factor,\n                       function(idx) {sum(select_blocks(f(daily.temp[idx],\n                                                       thresholds[jdays[idx]]), min_length - 1))})}\n\n  nna<-climdex.pcic:::tapply.fast(is.na(temp)==FALSE, date.factor,sum, na.rm = TRUE)\n  length<-climdex.pcic:::tapply.fast(temp, date.factor, function(x) length(x))\n  vals[nna/length*100<(100-na_maxperc)]=NA\n  return(vals)\n}\n\nselect_block <- function (d, n, na_value = FALSE)\n  { stopifnot(is.logical(d), is.numeric(n))\n    if (n < 1)\n      return(d)\n    if (n >= length(d))\n      return(rep(FALSE, length(d)))\n    d[is.na(d)] <- na_value\n    d2 <- Reduce(function(x, y) {\n      return(c(rep(FALSE, y), d[1:(length(d) - y)]) & x)\n    }, 1:n, d)\n    return(Reduce(function(x, y) {\n      return(c(d2[(y + 1):length(d2)], rep(FALSE, y)) | x)\n    }, 1:n, d2))\n  }\n",
    "created" : 1516700223491.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "3015470530",
    "id" : "ED9A5621",
    "lastKnownWriteTime" : 1516711610,
    "last_content_update" : 1516711610924,
    "path" : "/prod/zue/climate/comm_serv/CLIMANDES_Data/src_C2/Rclimandes_2/imn_code/climandes-2/src/ClimIndVis/R/calc_climandes_indices_helpers.R",
    "project_path" : "R/calc_climandes_indices_helpers.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}