###############################################
## crear objeto climindvis con datos grillados
###############################################

# En este práctica vamos a aprender como crear un objeto climindivs de datos grillados.
# Por el momento, el paquete no esta designado para leer grandes cantidades de datos. Es possible, pero dura mucho tiempo.
# Por eso concentramos a datos con baja resolución en este práctica.
# La sigiuente versión va a incluir una opción para conjuntos de datos largos.

# Let's go!

# En la carpeta de datos de la unidad 1 encuentras datos diarios de PISCOp. Para crear un objeto de datos grillados vamos a leer estes datos.
# Pero por primero cargamos los paquetes necessarios, el codigo help_fun y definimos las rutas.

library(ClimIndVis)
library(ncdf4)

# Su "directorio de trabajo" debe ser la carpeta donde guardó la carpeta de la Unidad 1.
#

(dir <- "/prod/zue/climate/comm_serv/CLIMANDES_Data/src_C2/Rclimandes_2/")

dir <- ""
source("/prod/zue/climate/comm_serv/CLIMANDES_Data/src_C2/Rclimandes_2/imn_code/climandes-2/experiments/imn/moodle/help_fun.R")


# La carpeta de Unidad 1 contiene datos de PISCOp diario desarrollado por Senamhi Perú. Muy probable que los conozca.
# Sin embargo, este no es el PISCOp original con una resolución de xxx, sino PISCOp interpolado en la grilla de los nuevos hindcasts del ECMWF S5.
path <- paste0("/prod/zue/climate/comm_serv/CLIMANDES_Data/src_C2/Rclimandes_2/imn_code/climandes-2/experiments/imn/moodle/Unidad1/piscop_daily/PISCOp_S5.nc")

# Nuestro conjunto de datos está en formato netcdf.
# Si está leyendo datos de netcdf en R por primera vez, le recomendamos que haga un breve tutorial.
# Puede encontrar un tutorial en la página web de Unidad 1.

# abrimos el netcdf
prec_nc <- nc_open(path)

# y buscamos nombre y dimensiones del variable
param <- names(prec_nc$var)
fdims <- prec_nc$var[[param]]$dim
(fdimnames <- sapply(fdims, function(x) x$name))

# Obtiene las diferentes variables
prec_var <- ncvar_get(prec_nc,param)
prec_lon <- ncvar_get(prec_nc,varid=fdimnames[[grep('lon', fdimnames)]])
prec_lat <- ncvar_get(prec_nc,varid=fdimnames[[grep('lat', fdimnames)]])

# controlamos el formato de las fechas y convertir en "Date"
time <- ncvar_get(prec_nc,"time")
(unit <- ncatt_get(prec_nc, "time")$units)
# Todavía tenemos que cortar el string de caracteres para que sólo tengamos la fecha.
refdate <- as.POSIXct(gsub('.*since ', '', unit), tz='UTC')
prec_time <- as.Date(time, origin=refdate)

# Como lo hizimos para datos estacionales, tenemos que ver las dimensiones y controlar si estan en un formato apropiado.
str(prec_var)
str(prec_lon)
str(prec_lat)
str(prec_time)

# y preparamos una lista con los elementos de data_info
type <- "grid"
date_format <- "t1d"
data_name <- "PISCOp Diario S5grid"
# pnames no necesitamos

data_info <- list(type=type, date_format=date_format, data_name=data_name)

lat1 <- -19
lat2 <- -10
lon1 <- 360 -78
lon2 <- 360 - 68

climindvis_grid <-make_object(
  prec = prec_var[prec_lon<lon2 & prec_lon>lon1,prec_lat<lat2 & prec_lat>lat1,],
  dates_prec = prec_time,
  lon = prec_lon[prec_lon<lon2 & prec_lon>lon1], lat = prec_lat[prec_lat<lat2 & prec_lat>lat1],
  data_info = data_info)

# Ahora nuestro objeto de climindvis está listo.
class(climindvis_grid)
str(climindvis_grid)

# para las siguientes unidades, tenemos una función basado al código arriba que rectamente va a leer datos grillados y crear un objeto "climindvis".
# se llama get_grid_object y se encuentra en el documento help_fun.R
# puede usar los con su argumentos necessarios como ruta, etc.

climindvis_grid <- get_grid_object(path = path, data_name = data_name)

# listo: tenemos objetos de climindivs en grilla y punto. con estos podemos continuar calcular nuestros indicadores.
# Si trabaja con datos pronosticos o está interesado en las opciones con datos pronosticos del paquete ClimIndvis, puede continuar con la leccion "Preparar datos pronsticos"

